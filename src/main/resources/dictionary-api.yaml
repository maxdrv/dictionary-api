openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger
  license:
    name: MIT
servers:
  - url: http://localhost:8081/
paths:
  /api/v1/phrase:
    get:
      summary: get phrases by filter
      operationId: getPhrases
      tags:
        - phrase
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: page of phrases
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageOfPhraseDto"
    post:
      summary: create phrase
      operationId: createPhrase
      tags:
        - phrase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePhraseRequest"
      responses:
        '201':
          description: phrase created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhraseDto"
  /api/v1/phrase/{phraseId}:
    get:
      summary: get phrase by id
      operationId: getPhraseById
      tags:
        - phrase
      parameters:
        - name: phraseId
          in: path
          required: true
          description: id of the phrase
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: get phrase by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhraseDto"
    put:
      summary: update phrase
      operationId: updatePhrase
      tags:
        - phrase
      parameters:
        - name: phraseId
          in: path
          required: true
          description: The id of the phrase to update
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePhraseRequest"
      responses:
        '200':
          description: updated phrase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhraseDto"
    delete:
      summary: delete phrase
      operationId: deletePhraseById
      tags:
        - phrase
      parameters:
        - name: phraseId
          in: path
          required: true
          description: The id of the phrase to delete
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: phrase deleted
  /api/v1/tag:
    get:
      summary: get tags by filter
      operationId: getTags
      tags:
        - tag
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: page of tags
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageOfTagDto"
    post:
      summary: create tag
      operationId: createTag
      tags:
        - tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTagRequest"
      responses:
        '201':
          description: tag created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagDto"
  /api/v1/tag/{tagKey}:
    get:
      summary: get tag by key
      operationId: getTagByKey
      tags:
        - tag
      parameters:
        - name: tagKey
          in: path
          required: true
          description: the key of the tag
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: '^[0-9a-zA-Z-_]+$'
      responses:
        '200':
          description: get tag by key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagDto"
    put:
      summary: update tag by key
      operationId: updateTagByKey
      tags:
        - tag
      parameters:
        - name: tagKey
          in: path
          required: true
          description: the key of the tag
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: '^[0-9a-zA-Z-_]+$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTagRequest"
      responses:
        '200':
          description: get tag by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagDto"
    delete:
      summary: delete tag by key
      operationId: deleteTagByKey
      tags:
        - tag
      parameters:
        - name: tagKey
          in: path
          required: true
          description: The key of the tag to delete
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: '^[0-9a-zA-Z-_]+$'
      responses:
        '200':
          description: tag deleted
  /api/v1/plan:
    get:
      summary: get plan by filter
      operationId: getPlans
      tags:
        - plan
      parameters:
        - name: description
          in: query
          required: false
          schema:
            type: string
        - name: tags
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 100
              pattern: '^[0-9a-zA-Z-_]+$'
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: page of plans
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageOfPlanGridDto"
    post:
      summary: create plan
      operationId: createPlan
      tags:
        - plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlanRequest"
      responses:
        '201':
          description: plan created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanDetailedDto"
  /api/v1/plan/{planId}:
    get:
      summary: get plan by id
      operationId: getPlanById
      tags:
        - plan
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanDetailedDto"
    put:
      summary: update plan by id
      operationId: updatePlanById
      tags:
        - plan
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlanRequest"
      responses:
        '200':
          description: updated plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanDetailedDto"
    delete:
      summary: delete plan by id
      operationId: deletePlanById
      tags:
        - plan
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: plan deleted
  /api/v1/plan/{planId}/tag:
    get:
      summary: get tags by plan id
      operationId: getTagsByPlanId
      tags:
        - plan
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: plan
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/ListOfTagDto"
    put:
      summary: add tag to plan
      operationId: addTagToPlan
      tags:
        - plan
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTagRequest"
      responses:
        '200':
          description: plan's list of tags after add one
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfTagDto"
  /api/v1/plan/{planId}/tag/{tagKey}:
    delete:
      summary: remove tag from plan
      operationId: removeTagFromPlan
      tags:
        - plan
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
        - name: tagKey
          in: path
          required: true
          description: the key of the tag
          schema:
            type: string
            minLength: 1
            maxLength: 100
            pattern: '^[0-9a-zA-Z-_]+$'
      responses:
        '200':
          description: plan's list of tags after remove one
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfTagDto"
  /api/v1/plan/{planId}/phrase:
    put:
      summary: add phrase to plan
      operationId: addPhraseToPlan
      tags:
        - plan
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePhraseRequest"
      responses:
        '200':
          description: phrase is added to plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanDetailedDto"
  /api/v1/plan/{planId}/phrase/{phraseId}:
    put:
      summary: update phrase in plan
      operationId: updatePhraseInPlan
      tags:
        - plan
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
        - name: phraseId
          in: path
          required: true
          description: the id of the phrase
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePhraseRequest"
      responses:
        '200':
          description: updated phrase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanDetailedDto"
    delete:
      summary: remove phrase from plan
      operationId: removePhraseFromPlan
      tags:
        - plan
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
        - name: phraseId
          in: path
          required: true
          description: the id of the phrase
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: plan after remove phrase
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlanDetailedDto"
  /api/v1/plan/{planId}/startLesson:
    post:
      summary: start lesson from plan
      operationId: startLessonFromPlan
      tags:
        - lesson
      parameters:
        - name: planId
          in: path
          required: true
          description: the id of the plan
          schema:
            type: integer
            format: int64
        - name: orderStrategy
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/OrderStrategyTypeDto"
      responses:
        '200':
          description: first question for this lesson
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NextQuestionDto"
components:
  schemas:
    DemoTypeDto:
      type: string
      enum:
        - ONE
        - TWO
    CreateDemoDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        type:
          $ref: "#/components/schemas/DemoTypeDto"
    UpdateDemoDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        type:
          $ref: "#/components/schemas/DemoTypeDto"
    DemoDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          $ref: "#/components/schemas/DemoTypeDto"
    PageOfDemoDto:
      type: object
      required:
        - size
        - numeber
        - totalElements
        - totalPages
        - content
      properties:
        size:
          type: integer
        number:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        content:
          type: array
          items:
            $ref: "#/components/schemas/DemoDto"
    LangDto:
      type: string
      enum:
        - UNKNOWN
        - RU
        - FR
        - EN
    PhraseDto:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - source
        - sourceLang
        - transcription
        - target
        - targetLang
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        planId:
          type: integer
          format: int64
        source:
          type: string
        sourceLang:
          $ref: "#/components/schemas/LangDto"
        transcription:
          type: string
        target:
          type: string
        targetLang:
          $ref: "#/components/schemas/LangDto"
    ListOfPhraseDto:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/PhraseDto"
    PageOfPhraseDto:
      type: object
      required:
        - size
        - numeber
        - totalElements
        - totalPages
        - content
      properties:
        size:
          type: integer
        number:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        content:
          type: array
          items:
            $ref: "#/components/schemas/PhraseDto"
    CreatePhraseRequest:
      type: object
      required:
        - source
        - sourceLang
        - transcription
        - target
        - targetLang
      properties:
        source:
          type: string
        sourceLang:
          $ref: "#/components/schemas/LangDto"
        transcription:
          type: string
        target:
          type: string
        targetLang:
          $ref: "#/components/schemas/LangDto"
    UpdatePhraseRequest:
      type: object
      required:
        - id
        - source
        - sourceLang
        - transcription
        - target
        - targetLang
      properties:
        id:
          type: integer
          format: int64
        source:
          type: string
        sourceLang:
          $ref: "#/components/schemas/LangDto"
        transcription:
          type: string
        target:
          type: string
        targetLang:
          $ref: "#/components/schemas/LangDto"
    TagDto:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[0-9a-zA-Z-_]+$'
    ListOfTagDto:
      type: object
      required:
        - content
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/TagDto"
    PageOfTagDto:
      type: object
      required:
        - size
        - numeber
        - totalElements
        - totalPages
        - content
      properties:
        size:
          type: integer
        number:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        content:
          type: array
          items:
            $ref: "#/components/schemas/TagDto"
    CreateTagRequest:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[0-9a-zA-Z-_]+$'
    UpdateTagRequest:
      type: object
      required:
        - newKey
      properties:
        newKey:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[0-9a-zA-Z-_]+$'
    PlanDetailedDto:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - description
        - phrases
        - tags
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        description:
          type: string
        phrases:
          type: array
          items:
            $ref: "#/components/schemas/PhraseDto"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagDto"
    PlanGridDto:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - description
        - phrases
        - tags
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        description:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagDto"
    PageOfPlanGridDto:
      type: object
      required:
        - size
        - numeber
        - totalElements
        - totalPages
        - content
      properties:
        size:
          type: integer
        number:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        content:
          type: array
          items:
            $ref: "#/components/schemas/PlanGridDto"
    CreatePlanRequest:
      type: object
      required:
        - description
        - tags
      properties:
        description:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/CreateTagRequest"
    UpdatePlanRequest:
      type: object
      required:
        - description
      properties:
        description:
          type: string
    NextQuestionDto:
      type: object
      required:
        - lessonId
        - hasQuestion
      properties:
        lessonId:
          type: integer
          format: int64
        hasQuestion:
          type: boolean
        question:
          $ref: "#/components/schemas/QuestionDto"
    QuestionDto:
      type: object
      required:
        - lessonItemId
        - question
      properties:
        lessonItemId:
          type: integer
          format: int64
        question:
          type: string
    OrderStrategyTypeDto:
      type: string
      enum:
        - NATURAL
        - REVERSE
